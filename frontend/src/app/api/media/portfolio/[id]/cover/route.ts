// app/api/media/portfolio/[id]/cover/route.ts
import type { NextRequest } from "next/server";

/**
 * –ü—Ä–æ–∫—Å–∏-—Ä–æ—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏ –æ–±–ª–æ–∂–µ–∫ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.
 * –ù—É–∂–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 *   API_BASE="https://api.overcreate.co"  // —Å–µ—Ä–≤–µ—Ä–Ω–∞—è
 */

export const revalidate = 0;            // –±–µ–∑ ISR –∫—ç—à–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–∞
export const dynamic = "force-dynamic"; // –Ω–µ —Å—Ç–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å

const API_BASE = process.env.API_BASE || process.env.NEXT_PUBLIC_API_BASE;

function toAbs(url: string): string {
  if (!url) return "";
  if (url.startsWith("http://") || url.startsWith("https://")) return url;
  if (!API_BASE) return url;
  return `${API_BASE}${url.startsWith("/") ? "" : "/"}${url}`;
}

// üëá –∫–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî params: Promise<...> –∏ await
export async function GET(
  _req: NextRequest,
  ctx: { params: Promise<{ id: string }> }
) {
  if (!API_BASE) {
    return new Response("API_BASE is not configured", { status: 500 });
  }

  const { id } = await ctx.params;

  // 1) –ë–µ—Ä—ë–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
  const metaRes = await fetch(`${API_BASE}/api/portfolio/${id}`, {
    cache: "no-store",
    // headers: { Authorization: `Bearer ${process.env.API_TOKEN}` },
  });

  if (!metaRes.ok) {
    return new Response("Portfolio item not found", { status: 404 });
  }

  const json = await metaRes.json().catch(() => ({}));
  const item = json?.data ?? json;

  const coverSrc: string | undefined =
    item?.cover_url ?? item?.coverUrl ?? item?.cover ?? undefined;

  if (!coverSrc && item?.cover_key) {
    // –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–ª—é—á ‚Äî –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å URL –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –∫–ª—é—á—É
    // coverSrc = `${API_BASE}/api/media/by-key/${encodeURIComponent(item.cover_key)}`;
  }

  if (!coverSrc) {
    return new Response("Cover not configured", { status: 404 });
  }

  const abs = toAbs(String(coverSrc));

  // 2) –¢—è–Ω–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –Ω–∞—Ä—É–∂—É
  const imgRes = await fetch(abs, { cache: "no-store" });
  if (!imgRes.ok || !imgRes.body) {
    return new Response("Cover fetch failed", { status: 404 });
  }

  const contentType = imgRes.headers.get("content-type") ?? "image/jpeg";
  const etag = imgRes.headers.get("etag") ?? undefined;
  const lastMod = imgRes.headers.get("last-modified") ?? undefined;

  const headers = new Headers();
  headers.set("Content-Type", contentType);
  headers.set(
    "Cache-Control",
    // –±—Ä–∞—É–∑–µ—Ä ‚Äî —Å—Ä–∞–∑—É; CDN ‚Äî —Å—É—Ç–∫–∏; SWR ‚Äî –Ω–µ–¥–µ–ª—è
    "public, max-age=0, s-maxage=86400, stale-while-revalidate=604800"
  );
  if (etag) headers.set("ETag", etag.replaceAll('"', ""));
  if (lastMod) headers.set("Last-Modified", lastMod);

  return new Response(imgRes.body, { status: 200, headers });
}
